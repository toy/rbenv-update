#!/usr/bin/env bash
set -e
[ -n "$RBENV_DEBUG" ] && set -x

tput() {
  command tput "$@" 2>/dev/null || true
}

HIGLIGHT=$(tput setaf 2)$(tput bold)
WARN=$(tput setaf 1)$(tput bold)
NORMAL=$(tput sgr0)

indent_output() {
  while read data; do
    echo -e " ${HIGLIGHT}|${NORMAL}  $data"
  done
}

is_git_repo() {
  git rev-parse --git-dir &>/dev/null
}

has_origin() {
  git config remote.origin.url > /dev/null
}

rbenv_update() {
  echo -e "${HIGLIGHT}updating $1${NORMAL}"
  if ! is_git_repo; then
    echo -e "${WARN}Not a git repo; skipping...${NORMAL}" | indent_output
  elif ! has_origin; then
    echo -e "${WARN}Has no remote origin; skipping...${NORMAL}" | indent_output
  else
    if branch=$(git symbolic-ref --short -q HEAD); then
      echo -e "On branch $branch, pulling..." | indent_output
      git fetch origin 2>&1 | indent_output
      git merge --ff-only FETCH_HEAD 2>&1 | indent_output
    elif tag=$(git describe --tags --exact-match HEAD 2>/dev/null); then
      latest_tag=$(git describe --tags --abbrev=0 master@{u} 2>/dev/null)
      if [ "$tag" = "$latest_tag" ]; then
        echo -e "At tag $tag, updating..." | indent_output
        git fetch origin 2>&1 | indent_output
        latest_tag=$(git describe --tags --abbrev=0 master@{u} 2>/dev/null)
        if [ "$tag" = "$latest_tag" ]; then
          echo -e "Already at latest tag." | indent_output
        else
          echo -e "Switching to $latest_tag." | indent_output
          git checkout "$latest_tag" -q
        fi
      else
        echo -e "${WARN}At tag $tag, which is not latest for master upstream"\
          "($latest_tag), only fetching...${NORMAL}" | indent_output
        git fetch origin 2>&1 | indent_output
      fi
    else
      echo -e "${WARN}Not on branch or at tag, only fetching...${NORMAL}" | indent_output
      git fetch origin 2>&1 | indent_output
    fi
  fi
  echo
}

if [ $# -gt 0 ]; then
  to_update="$*"
fi

cd "$(rbenv root)"

if [[ -z "$to_update" ]] || [[ " $to_update " == *" rbenv "* ]]; then
  rbenv_update rbenv
fi

for plugin in plugins/*; do
  name=$(basename "$plugin")
  if [[ -z "$to_update" ]] || [[ " $to_update " == *" $name "* ]]; then
    pushd "$plugin" >/dev/null
    rbenv_update "$name"
    popd >/dev/null
  fi
done
