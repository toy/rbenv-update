#!/usr/bin/env bash
set -e
[ -n "$RBENV_DEBUG" ] && set -x

HIGLIGHT=$(tput setaf 2)$(tput bold)
NORMAL=$(tput sgr0)

indent_output() {
  while read data; do
    echo -e " ${HIGLIGHT}|${NORMAL}  $data"
  done
}

is_git_repo() {
  $(git rev-parse --git-dir &>/dev/null)
}

has_origin() {
  git config remote.origin.url > /dev/null
}

rbenv_update() {
  echo -e "${HIGLIGHT}updating $1${NORMAL}"
  if ! is_git_repo; then
    echo -e "Not a git repo; skipping..." | indent_output
  elif ! has_origin; then
    echo -e "Has no remote origin; skipping..." | indent_output
  else
    if branch=$(git symbolic-ref --short -q HEAD); then
      echo -e "On branch $branch, pulling..." | indent_output
      git fetch origin 2>&1 | indent_output
      git pull --ff-only origin 2>&1 | indent_output
    elif tag=$(git describe --tags --exact-match HEAD 2>/dev/null); then
      latest_tag=$(git describe --tags --abbrev=0 master@{u} 2>/dev/null)
      if [ "$tag" = "$latest_tag" ]; then
        echo -e "At tag $tag, updating..." | indent_output
        git fetch origin 2>&1 | indent_output
        latest_tag=$(git describe --tags --abbrev=0 master@{u} 2>/dev/null)
        if [ "$tag" = "$latest_tag" ]; then
          echo -e "Already at latest tag." | indent_output
        else
          echo "Switching to $latest_tag." | indent_output
          git checkout "$latest_tag" -q
        fi
      else
        echo -e "At tag $tag, which is not latest for master upstream"\
          "($latest_tag), skipping..." | indent_output
      fi
    else
      echo "Not on branch or at tag, skipping..." | indent_output
    fi
  fi
  echo
}

cd "$(rbenv root)"
rbenv_update rbenv

for plugin in plugins/*; do
  pushd $plugin >/dev/null
  rbenv_update `basename $plugin`
  popd >/dev/null
done
